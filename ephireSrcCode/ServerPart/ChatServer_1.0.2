import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.StringTokenizer;
import java.util.Vector;



public class ChatServer {
	// Socket
	static Vector ClientSockets;
	static Vector LoginNames;
	int port = 5217;
	
	ChatServer() throws IOException {
		
		ServerSocket server = new ServerSocket(port);
		ClientSockets = new Vector();
		LoginNames = new Vector();
		
		while(true) {
			Socket client = server.accept();
			AcceptClient acceptClient = new AcceptClient(client);
		}
	}
	
	
	class AcceptClient extends Thread {
		
		Socket ClientSocket;
		DataInputStream din;
		DataOutputStream dout;
		
		AcceptClient(Socket client) throws IOException{
			ClientSocket = client;
			din = new DataInputStream(ClientSocket.getInputStream());
			dout = new DataOutputStream(ClientSocket.getOutputStream());
			
			String LoginName = din.readUTF();  
			String Password = din.readUTF();       //login info is going first
			
			
			
			String DBAnswer = new DBCheck().isAvailable(LoginName, Password);
        	dout.writeUTF(DBAnswer);
        	
        	if(DBAnswer.equals("unf")) {
        		dout.writeUTF("unf");
        		
        		System.out.println("Client: " + LoginName + " was rejected.");
			 }     	

        	else {
        		LoginNames.add(LoginName);
			    ClientSockets.add(ClientSocket);
        		dout.writeUTF("confirmed");
        		start();
        	}
			
			
		}
		
		public void run() {
			
			while(true) {
				
		        String msgFromClient;
				
		        try {
					msgFromClient = din.readUTF();
                    StringTokenizer st = new StringTokenizer(msgFromClient);
			        String LoginName = st.nextToken();             // msg: LoginName + MsgType + text
			        String MsgType = st.nextToken();
			        String msg = "";                               // Var with user messages
			        
			        int available = 0;                             // Var for check "is the new client(LoginName) available in the database?"
			        int lo = -1;
			        
			        
			        
			        while(st.hasMoreTokens()) {                    // message parse
			        	msg = msg + " " + st.nextToken();
			        }
			        
			        
			        
			        if(MsgType.equals("LOGIN")) {                  // message analyzing

			        for(int i = 0; i < LoginNames.size(); i++) {
			        	Socket pSocket = (Socket) ClientSockets.elementAt(i);
			        	DataOutputStream pOut = new DataOutputStream(pSocket.getOutputStream());
			        	pOut.writeUTF(LoginName + " has logged in.");	
			             } 
			           }
			          
			        
			        else if (MsgType.equals("LOGOUT")) {
				        
				        for(int i = 0; i < LoginNames.size(); i++) {
				        	if(LoginName.equals(LoginNames.elementAt(i))) {
				        		lo = i;
				        	}
				        	Socket pSocket = (Socket) ClientSockets.elementAt(i);
				        	DataOutputStream pOut = new DataOutputStream(pSocket.getOutputStream());
				        	pOut.writeUTF(LoginName + " has logged out.");
				        	
				        } 
				        if (lo >= 0) {
				        	LoginNames.removeElementAt(lo);
				        	ClientSockets.removeElementAt(lo);
				        }
				      }
			        else {
					    for(int i = 0; i < LoginNames.size(); i++) {
					        Socket pSocket = (Socket) ClientSockets.elementAt(i);
					        DataOutputStream pOut = new DataOutputStream(pSocket.getOutputStream());
					        pOut.writeUTF(LoginName + ": " + msg);
					    } 
			        }
			        if(MsgType.equals("LOGOUT")) break;                // завершение потока
			        
			        } catch (IOException e) {
						e.printStackTrace();
				}
		    }
		}
	}
	
	public static void main(String[] args) throws IOException {
		ChatServer server = new ChatServer();
	}
}
